#!/usr/bin/env python3
"""
whois_ip.py â€” show network_range, name, description, country
Usage:
    python whois_ip.py 8.8.8.8 2606:4700:4700::1111
"""

import sys
from ipwhois import IPWhois
from ipwhois.exceptions import IPDefinedError, WhoisLookupError      # :contentReference[oaicite:0]{index=0}

FIELDS = {
    "name":        ("name",),
    "description": ("description", "descr"),                         # second alias covers RIPE/LACNIC fields
    "country":     ("country",),
}

def first_val(mapping, *keys):
    """Return the first non-empty value found in mapping[key]."""
    for k in keys:
        v = mapping.get(k)
        if v:
            return v
    return "-"

def fmt_range(net):
    """CIDR if available, else start-end, else '-'."""
    cidr = net.get("cidr")                                           # ipwhois adds this when registry includes it :contentReference[oaicite:1]{index=1}
    if cidr:
        return cidr
    start, end = net.get("start_address"), net.get("end_address")
    return f"{start} - {end}" if start and end else "-"

def show(addr: str):
    print(f"\n### {addr}")
    try:
        nets = IPWhois(addr).lookup_whois(get_referral=True)["nets"] or [{}]
        net  = nets[0]                                               # most-specific block first
        print(f"network_range  : {fmt_range(net)}")
        for label, keys in FIELDS.items():
            print(f"{label:14}: {first_val(net, *keys)}")

    except IPDefinedError:                                           # RFC 1918 etc.
        print("network_range  : private/reserved")
        print("name           : -\ndescription    : -\ncountry        : -")
    except WhoisLookupError as e:
        print(f"Lookup failed : {e}")
    except Exception as e:
        print(f"Error         : {e}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Give one or more IP addresses")
        sys.exit(1)
    for ip in sys.argv[1:]:
        show(ip)
